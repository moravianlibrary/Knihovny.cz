<?php
  $coverDetails = $this->record($this->driver)->getCoverDetails('core', 'medium', $this->record($this->driver)->getThumbnail('large'));
  $cover = $coverDetails['html'];
?>
<div class="media" vocab="http://schema.org/" resource="#record" typeof="<?=$this->driver->getSchemaOrgFormats()?> Product">
<div class="row">
    <div class="col-md-6 library-detail">
        <!-- Library name -->
        <?php
          $sigla = $this->driver->getSigla();
        ?>
        <h1 property="name" class="record-title" data-sigla="<?=$sigla ?: 'undefined' ?>"><?=$this->escapeHtml($this->driver->getTitle())?></h1>
        <?php if ($cover): ?>
          <?=$cover?>
        <?php endif; ?>
        <?php /* Display Main Details */ ?>
        <?php
            $formatter = $this->recordDataFormatter();
            $coreFields = $formatter->getData($driver, $formatter->getDefaults('library'));
        ?>
        <?php if (!empty($coreFields)): ?>
            <table class="table table-striped">
                <caption class="sr-only"><?=$this->transEsc('Library Details')?></caption>
                <?php foreach ($coreFields as $current): ?>
                  <?php if ($current['context']['heading']):?>
                    <h2><?=$this->icon($current['context']['icon'])?> <?=$this->transEsc($current['label'])?></h2>
                    <p>
                  <?php else: ?>
                    <h2 class="hidden"><?=$this->transEsc($current['label'])?></h2>
                    <p class="<?=$current['context']['content-class']?>"><?=$this->icon($current['context']['icon'])?>
                  <?php endif; ?>
                  <?=$current['value']?></p>
                <?php endforeach; ?>
            </table>
        <?php endif; ?>
        <?php /* End Main Details */ ?>
    </div>

    <div class="col-md-6">
        <?php $coords = $this->driver->tryMethod('getGpsCoordinates'); if (!empty($coords)): ?>
            <div id="map"></div>
            <?php
              $apiKey = $this->config()->get('config')->GoogleMaps->apikey;
              $addresses = $this->driver->getLibraryAddress();
              $address = !(empty($addresses)) ? $addresses[0] : null;
              $coordinates = [
                  [
                      'title' => $this->driver->getTitle(),
                      'address' => $address,
                      'lng' => $coords['lng'],
                      'lat' => $coords['lat'],
                  ]
              ];
              foreach ($this->driver->tryMethod('getBranches', []) as $branch) {
                  if (isset($branch['coordinates']) && !empty($branch['coordinates'])) {
                      $coordinates[] = [
                          'title' => $branch['title'],
                          'address' => $branch['address'] ?? null,
                          'lng' => $branch['coordinates']['lng'],
                          'lat' => $branch['coordinates']['lat'],
                      ];
                  }
              }
              $coordinates = json_encode($coordinates);
              $initMap = <<<JS
                function initMap() {
                  var coordinates = $coordinates;
                  var info = [];
                  var myLatLng = {lat: coordinates[0].lat, lng: coordinates[0].lng};
                  var map = new google.maps.Map(document.getElementById('map'), {
                    zoom: 10,
                    center: myLatLng
                  });
                  var bounds = new google.maps.LatLngBounds();
                  coordinates.forEach(function forEachCoord(coord, index){
                    var position = new google.maps.LatLng(coord.lat, coord.lng);
                    bounds.extend(position);
                    var marker = new google.maps.Marker({
                      position: position,
                      map: map,
                      title: 'name of library'
                    });
                    var content = $("<div>", {id: "content", "class": "marker-info"});
                    content.append($("<div>").attr('class', 'marker-title')
                      .text(coord.title));
                    if (coord.address != null) {
                      content.append($("<div>").attr('class', 'marker-subtitle')
                        .text(coord.address));
                    }
                    info[index] = new google.maps.InfoWindow({ content: content.prop('outerHTML') });
                    if (index > 0) {
                      marker.setIcon("http://maps.google.com/mapfiles/ms/icons/blue-dot.png");
                    }
                    marker.addListener("click", () => {
                      let isMap = info[index].getMap();
                      info.forEach(function closeInfoWindows(infoWindow) {
                        infoWindow.close();
                      });
                      if (!isMap) {
                        info[index].open(map, marker);
                      }
                    });
                  });
                  if (coordinates.length > 1) {
                    map.fitBounds(bounds);
                    map.panToBounds(bounds);
                  }
                }
JS;
            $googleMapsScript = 'https://maps.googleapis.com/maps/api/js?key=' . $this->escapeUrl($apiKey) . '&callback=initMap';
            $this->inlineScript(\Laminas\View\Helper\HeadScript::SCRIPT, $initMap, 'SET');
            echo $this->inlineScript()->appendFile($googleMapsScript);
          ?>
        <?php endif; ?>
    </div>
</div>
</div>
