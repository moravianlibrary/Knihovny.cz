; Settings for Content Security Policy header; you can learn more here:
; https://vufind.org/wiki/administration:security:content_security_policy
[CSP]
; It is possible to use CSP in report-only mode. See report-to setting below.
; This setting could be set differently for each APPLICATION_ENV value (written as
; array key below). Please note, that Whoops error handler (enabled in development
; mode) does not show correctly when report_only is false.
report_only[production] = true
report_only[development] = true

; The nonce (number used once) - unique number for each request, it is strongly
; recommend to keep this setting on
use_nonce = true

; Directives; you can find a list of available directives on this page:
; https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy
; For evaluation of CSP you can use this tool provided by Google:
; https://csp-evaluator.withgoogle.com/
; See also the VuFind wiki for additional recommendations and tools:
; https://vufind.org/wiki/administration:security:content_security_policy
[Directives]
; default of 'self' with 'none' on child, object, prefetch allows SVG requests.
default-src[] = "'none'"
child-src[] = "blob:"
object-src[] = "'none'"
prefetch-src[] = "'none'"
; 'strict-dynamic' allows any trusted script to load other scripts with a hash.
;   Safari 15.3 and earlier does not support this feature. Since these browser
;   versions constitute a significant portion of users, especially mobile users,
;   'strict-dynamic' is disabled by default.
;   https://caniuse.com/mdn-http_headers_content-security-policy_strict-dynamic
script-src[] = "'strict-dynamic'"
script-src[] = "'unsafe-inline'"
; backwards compatible to CSP 2
;script-src[] = "http:"
script-src[] = "https:"
connect-src[] = "'self'"
; worker-src required for jsTree with browsers that don't support 'strict-dynamic' (e.g. Safari):
worker-src[] = "blob:"
style-src[] = "'self'"
style-src[] = "'unsafe-inline'"
img-src[] = "'self'"
; Minio:
img-src[] = "https://files.app.knihovny.cz"
; Ob√°lky knih
img-src[] = "https://cache.obalkyknih.cz"
img-src[] = "https://cache2.obalkyknih.cz"
; Google mapy
img-src[] = "https://maps.googleapis.com"
img-src[] = "https://maps.gstatic.com"
img-src[] = "data:"
img-src[] = "https://khms0.googleapis.com"
img-src[] = "https://khms1.googleapis.com"
font-src[] = "https://fonts.gstatic.com"
connect-src[] = "https://maps.googleapis.com"
style-src[] = "https://fonts.googleapis.com"
; Google Analytics/Tag Manager
img-src[] = "https://www.google-analytics.com"
connect-src[] = "https://www.google-analytics.com"
connect-src[] = "https://stats.g.doubleclick.net"
img-src[] = "https://www.google.cz/ads/ga-audiences"
img-src[] = "https://www.google.com/ads/ga-audiences"
img-src[] = "https://www.googletagmanager.com"
; Google reCaptcha
img-src[] = "https://www.gstatic.com"
frame-src[] = "https://www.google.com"
;FIXME: When we refactor Google Tag Manager variables to templates, we can remove 'unsafe-eval'
script-src[] = "'unsafe-eval'"
; If you are using MapSelection recommendation module, uncommnent a line below
; for basemap you are using:
;img-src[] = "https://maps.wikimedia.org"
;img-src[] = "http://tile.stamen.com"
img-src[] = "https://basemaps.cartocdn.com"
font-src[] = "'self'"
base-uri[] = "'self'"
; Set URI which browser should use to report CSP violation; you should provide URL
; when you enable report_only
report-to[] = 'https://o69863.ingest.sentry.io/api/149541/security/?sentry_key=7c4002f8b5e6476082ca88ffae595340'
